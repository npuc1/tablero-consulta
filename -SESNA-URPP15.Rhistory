position = "right",
fontSize = 16,
fontFamily = "monospace"),
labelLayout = list(hideOverlap = TRUE),
emphasis = list(focus = "adjacency",
scale = 1.3,
lineStyle = list(width = 3,
opacity = 1)),
selectedMode = TRUE,
roam = TRUE,
lineStyle = list(color = "target",
curveness = 0.2,
opacity = 0.2),
force = list(edgeLength = 30,
repulsion = 45,
gravity = 0,
layoutAnimation = FALSE),
title = list(text = "Texto prueba")) |>
e_graph_nodes(nodes_redu, name, value, size, grp, symbol) |>
e_graph_edges(edges_efe, source, target) |>
e_tooltip()
})
})
# Treemap output
output$tree <- renderPlotly({
validate(
need(input$filtro_act_tree, "Generando visualización...")
)
if(input$filtro_act_tree == "Todos") {
plot_ly(
data = dataTreemap,
type = "treemap",
ids = ~id,
labels = ~lab,
customdata =  ~infoLA,
parents = ~parent,
values = ~valor,
branchvalues = "total",
maxdepth = 3,
texttemplate = "%{label}<br><br>%{customdata}",
hovertemplate = "%{label}<br>Número de actividades: %{value}<extra></extra>",
marker = list(colors = ~color_code)
) %>%
config(locale = "es")
} else {
validate(
need(nrow(dataTreemapFilter %>% filter(actor_filtro == input$filtro_act_tree)) > 0,
"No se reportaron actividades")
)
filteredDataTree <- dataTreemapFilter %>%
filter(actor_filtro == input$filtro_act_tree)
ejes <- filteredDataTree %>%
group_by(parent) %>%
summarise(valor = sum(valor)) %>%
filter(grepl("Eje", parent)) %>%
rename(id = parent) %>%
mutate(lab = id,
parent = "PI-PNA",
actor_filtro = "Eje",
color_code = case_when(id == "Eje 1" ~ "#6ac72c",
id == "Eje 2" ~ "#3a90c5",
id == "Eje 3" ~ "#72588f",
id == "Eje 4" ~ "#e14586"))
filteredDataTree <- full_join(filteredDataTree, ejes)
plot_ly(
data = filteredDataTree,
type = "treemap",
ids = ~id,
labels = ~lab,
customdata = ~infoLA,
texttemplate = "%{label}<br><br>%{customdata}",
parents = ~parent,
values = ~valor,
branchvalues = "total",
maxdepth = 3,
marker = list(colors = ~color_code)
)
}
})
# Table data agrupada
groupedData <- reactive({
if(input$filtereje == "Todos") {
return(base_reporte %>%
group_by(Actores) %>%
summarise(acc_tot = sum(contiene_accion),
lineas_rep = length(unique(No.Línea.de.Acción[reporte == 1])),
est_rep = length(unique(No.Estrategia[reporte == 1])))
)
} else if (input$filtereje != "Todos" & input$filterobj == "Todos") {
return(base_reporte %>%
filter(Eje == input$filtereje) %>%
group_by(Actores) %>%
summarise(acc_tot = sum(contiene_accion),
lineas_rep = length(unique(No.Línea.de.Acción[reporte == 1])),
est_rep = length(unique(No.Estrategia[reporte == 1])))
)
}
else if (input$filtereje != "Todos" & input$filterobj != "Todos" & input$filterest == "Todas") {
return(base_reporte %>%
filter(Objetivo.Específico == input$filterobj) %>%
group_by(Actores) %>%
summarise(acc_tot = sum(contiene_accion),
lineas_rep = length(unique(No.Línea.de.Acción[reporte == 1])),
est_rep = length(unique(No.Estrategia[reporte == 1])))
)
}
else if (input$filtereje != "Todos" & input$filterobj != "Todos" & input$filterest != "Todas" & input$filterLA == "Todas") {
return(base_reporte %>%
filter(No.Estrategia == input$filterest) %>%
group_by(Actores) %>%
summarise(acc_tot = sum(contiene_accion),
lineas_rep = length(unique(No.Línea.de.Acción[reporte == 1])),
est_rep = length(unique(No.Estrategia[reporte == 1])))
)
}
else if (input$filtereje != "Todos" & input$filterobj != "Todos" & input$filterest != "Todas" & input$filterLA != "Todas") {
return(base_reporte %>%
filter(No.Línea.de.Acción == input$filterLA) %>%
group_by(Actores) %>%
summarise(acc_tot = sum(contiene_accion),
lineas_rep = length(unique(No.Línea.de.Acción[reporte == 1])),
est_rep = length(unique(No.Estrategia[reporte == 1])))
)
}
})
# Generación de filtros dinamicos
# Eje -> objetivo
observeEvent(input$filtereje, {
if(input$filtereje == "Todos") {
updateSelectizeInput(session, "filterobj", choices = c("Seleccione un eje"),
server = TRUE)
updateSelectizeInput(session, "filterest", choices = c("Seleccione un eje"),
server = TRUE)
updateSelectizeInput(session, "filterLA", choices = c("Seleccione un eje"),
server = TRUE)
}
else if (input$filtereje !="Todos" ) {
opcionesobj <- base_reporte %>%
filter(Eje == input$filtereje)%>%
pull (Objetivo.Específico)
updateSelectizeInput(session, "filterobj", choices = c("Todos",  opcionesobj ),
server = TRUE)
updateSelectizeInput(session, "filterest", choices = c("Seleccione un Objetivo"),
server = TRUE)
updateSelectizeInput(session, "filterLA", choices = c("Seleccione un Objetivo"),
server = TRUE)
}
})
# Objetivo -> est
observeEvent(input$filterobj , {
if (input$filterobj == "Seleccione un eje") {
updateSelectizeInput(session, "filterest", choices = c("Seleccione un eje"),
server = TRUE)
updateSelectizeInput(session, "filterLA", choices = c("Seleccione un eje"),
server = TRUE)
}
else if (input$filterobj == "Todos") {
updateSelectizeInput(session, "filterest", choices = c("Seleccione un objetivo" ),
server = TRUE)
updateSelectizeInput(session, "filterLA", choices = c("Seleccione un objetivo"),
server = TRUE)
}
else if (input$filterobj != "Todos") {
opcionesEst<-base_reporte$No.Estrategia[base_reporte$Objetivo.Específico==input$filterobj]
updateSelectizeInput(session, "filterest", choices = c("Todas",   opcionesEst ),
server = TRUE)
updateSelectizeInput(session, "filterLA", choices = c("Seleccione una estrategia"),
server = TRUE)
}
})
# Estrategia -> LA
observeEvent(input$filterest , {
if (input$filterest== "Seleccione un eje") {
updateSelectizeInput(session, "filterLA", choices = c("Seleccione un eje"),
server = TRUE)
}
else if (input$filterest== "Seleccione un objetivo") {
updateSelectizeInput(session, "filterLA", choices = c("Seleccione un objetivo"),
server = TRUE)
}
else if (input$filterest== "Todas") {
updateSelectizeInput(session, "filterLA", choices = c("Seleccione una estrategia"),
server = TRUE)
}
else if (input$filterest!= "Todas") {
opcionesLA<-base_reporte$No.Línea.de.Acción[base_reporte$No.Estrategia==input$filterest]
updateSelectizeInput(session, "filterLA", choices = c("Todas",   opcionesLA ),
server = TRUE)
}
})
# tabset dinamico para texto en jerarquia
output$tabsetText <- renderUI({
if(input$filtereje == "Todos") div()
else if(input$filterobj == "Todos") {
tabsetPanel(
type = "pills",
tabPanel("Nombre del eje", HTML("<p style=\"font-size:8px;\"></p>"), htmlOutput("textoEje")),
hr()
)
} else if(input$filterest == "Todas") {
tabsetPanel(
type = "pills",
tabPanel("Nombre del eje", HTML("<p style=\"font-size:8px;\"></p>"), htmlOutput("textoEje")),
tabPanel("Texto del objetivo", HTML("<p style=\"font-size:8px;\"></p>"), htmlOutput("textoObj")),
hr()
)
} else if(input$filterLA == "Todas") {
tabsetPanel(
type = "pills",
tabPanel("Nombre del eje", HTML("<p style=\"font-size:8px;\"></p>"), htmlOutput("textoEje")),
tabPanel("Texto del objetivo", HTML("<p style=\"font-size:8px;\"></p>"), htmlOutput("textoObj")),
tabPanel("Texto de la estrategia", HTML("<p style=\"font-size:8px;\"></p>"), htmlOutput("textoEst")),
hr()
)
} else {
tabsetPanel(
type = "pills",
tabPanel("Nombre del eje", HTML("<p style=\"font-size:8px;\"></p>"), htmlOutput("textoEje")),
tabPanel("Texto del objetivo", HTML("<p style=\"font-size:8px;\"></p>"), htmlOutput("textoObj")),
tabPanel("Texto de la estrategia", HTML("<p style=\"font-size:8px;\"></p>"), htmlOutput("textoEst")),
tabPanel("Texto de la línea de acción", HTML("<p style=\"font-size:8px;\"></p>"), htmlOutput("textoLA")),
hr()
)
}
})
# generacion texto dinamico
txtEjeReactive <- reactive({
filtro <- base_reporte %>%
filter(Eje == input$filtereje)
return(filtro$Texto.del.eje[1])
})
txtObjReactive <- reactive({
filtro <- base_reporte %>%
filter(Objetivo.Específico == input$filterobj)
return(filtro$Texto.objetivo[1])
})
txtEstReactive <- reactive({
filtro <- base_reporte %>%
filter(No.Estrategia == input$filterest)
return(filtro$texto.estrategia[1])
})
txtLAReactive <- reactive({
filtro <- base_reporte %>%
filter(No.Línea.de.Acción == input$filterLA)
return(filtro$texto.LA[1])
})
# output texto
output$textoEje <- renderText(paste0("<p style=\"font-size:16px;\">", {txtEjeReactive()}, "</p>"))
output$textoObj <- renderText(paste0("<p style=\"font-size:14px;\">", {txtObjReactive()}, "</p>"))
output$textoEst <- renderText(paste0("<p style=\"font-size:13px;\">", {txtEstReactive()}, "</p>"))
output$textoLA <- renderText(paste0("<p style=\"font-size:13px;\">", {txtLAReactive()}, "</p>"))
# conditional style
output$conditionalStyle <- renderUI({
color <- case_when(input$filtereje == "1" ~ "#6ac72c",
input$filtereje == "2" ~ "#3a90c5",
input$filtereje == "3" ~ "#72588f",
input$filtereje == "4" ~ "#e14586",
input$filtereje == "Todos" ~ "#847d7a")
tags$style(HTML(paste0(".tabbable > .nav > li[class=active] > a[data-value='Nombre del eje'] {background-color:", color, "; color:white}",
".tabbable > .nav > li[class=active] > a[data-value='Texto del objetivo'] {background-color:", color, "; color:white}",
".tabbable > .nav > li[class=active] > a[data-value='Texto de la estrategia'] {background-color:", color, "; color:white}",
".tabbable > .nav > li[class=active] > a[data-value='Texto de la línea de acción'] {background-color:", color, "; color:white}",
".tabbable > ul[id='tipo_tabla'] > li[class=nav-item] > a[class='nav-link active'] {background-color:", color, "; color:white}")))
})
# output tabla instituciones
output$dataTableInst <- renderDataTable({
acc_tot_texto <- tags$span(
"Actividades totales",
infoBtn("exp_acciones") %>%
bsTooltip("Se consideran los reportes realizados por las instituciones que hagan mencion a una actividad realizada.",
opacity = 0.7)
) %>%
as.character()
datatable((groupedData()) %>%
rename("Estrategias reportadas" = est_rep,
"Líneas de acción reportadas" = lineas_rep,
!!acc_tot_texto:=acc_tot),
selection = "none",
rownames = FALSE,
escape = FALSE,
options = list(language = list(url = "https://cdn.datatables.net/plug-ins/1.10.21/i18n/Spanish.json"),
columnDefs = list(list(className = 'dt-center', targets = 1:3))))
})
# output tabla lista acciones
previewData <- reactive({
validate(
need(input$filtro_act_tabla, "Generando tabla...")
)
if(input$filtro_act_tabla == "Todos") {
if(input$filtereje == "Todos") {
return(base_expandida %>%
select(c(31, 10, 11, 13, 20, 21, 14, 15)) %>%
setnames("No.Estrategia", "Estrategia"))
}
else if (input$filtereje != "Todos" & input$filterobj == "Todos") {
return(base_expandida %>%
filter(Eje == input$filtereje)%>%
select(c(31, 10, 11, 13, 20, 21, 14, 15)) %>%
setnames("No.Estrategia", "Estrategia"))
}
else if (input$filtereje != "Todos" & input$filterobj != "Todos" & input$filterest == "Todas") {
return(base_expandida %>%
filter(Objetivo.Específico == input$filterobj) %>%
select(c(31, 10, 11, 13, 20, 21, 14, 15)) %>%
setnames("No.Estrategia", "Estrategia"))
}
else if (input$filtereje != "Todos" & input$filterobj != "Todos" & input$filterest != "Todas" & input$filterLA == "Todas") {
return(base_expandida %>%
filter(No.Estrategia == input$filterest) %>%
select(c(31, 10, 11, 13, 20, 21, 14, 15)) %>%
setnames("No.Estrategia", "Estrategia"))
}
else if (input$filtereje != "Todos" & input$filterobj != "Todos" & input$filterest != "Todas" & input$filterLA != "Todas") {
return(base_expandida %>%
filter(No.Línea.de.Acción == input$filterLA) %>%
select(c(31, 10, 11, 13, 20, 21, 14, 15)) %>%
setnames("No.Estrategia", "Estrategia"))
}
} else {
if(input$filtereje == "Todos") {
return(base_expandida %>%
filter(Actor == input$filtro_act_tabla) %>%
select(c(31, 10, 11, 13, 20, 21, 14, 15)) %>%
setnames("No.Estrategia", "Estrategia"))
}
else if (input$filtereje != "Todos" & input$filterobj == "Todos") {
return(base_expandida %>%
filter(Actor == input$filtro_act_tabla) %>%
filter(Eje == input$filtereje)%>%
select(c(31, 10, 11, 13, 20, 21, 14, 15)) %>%
setnames("No.Estrategia", "Estrategia"))
}
else if (input$filtereje != "Todos" & input$filterobj != "Todos" & input$filterest == "Todas") {
return(base_expandida %>%
filter(Actor == input$filtro_act_tabla) %>%
filter(Objetivo.Específico == input$filterobj) %>%
select(c(31, 10, 11, 13, 20, 21, 14, 15)) %>%
setnames("No.Estrategia", "Estrategia"))
}
else if (input$filtereje != "Todos" & input$filterobj != "Todos" & input$filterest != "Todas" & input$filterLA == "Todas") {
return(base_expandida %>%
filter(Actor == input$filtro_act_tabla) %>%
filter(No.Estrategia == input$filterest) %>%
select(c(31, 10, 11, 13, 20, 21, 14, 15)) %>%
setnames("No.Estrategia", "Estrategia"))
}
else if (input$filtereje != "Todos" & input$filterobj != "Todos" & input$filterest != "Todas" & input$filterLA != "Todas") {
return(base_expandida %>%
filter(Actor == input$filtro_act_tabla) %>%
filter(No.Línea.de.Acción == input$filterLA) %>%
select(c(31, 10, 11, 13, 20, 21, 14, 15)) %>%
setnames("No.Estrategia", "Estrategia"))
}
}
})
base_expandida = rename(base_expandida, c(`Línea de acción` = Línea.de.Acción,
`Otros actores participantes` = Otros.actores.participantes,
`Actividad reportada` = Acción.reportada,
`Fecha de inicio` = Fecha.de.inicio,
`Fecha de término` = Fecha.de.término,
Actor = Actores))
output$previewTable <- renderDataTable({
previewData()
}, options = list(pageLength = 5,
language = list(url = "https://cdn.datatables.net/plug-ins/1.10.21/i18n/Spanish.json"),
scrollY = "500px"),
rownames = FALSE,
selection = "none")
# Descarga datos zip
nombrebase <- function() {
if(input$filtereje == "Todos") paste0("base_acciones_", Sys.Date(), ".xlsx")
else if(input$filterobj == "Todos") paste0("base_acciones_eje_", input$filtereje, "_", Sys.Date(), ".xlsx")
else paste0("base_acciones_filtrada_", Sys.Date(), ".xlsx")
}
output$descargaTabla <- downloadHandler(filename = "descarga_tablero.csv",
content = function(file){
write.csv(previewData(),
file = "descarga_tablero.csv",
row.names = FALSE)
})
output$descargaReporte <- downloadHandler(filename = "Reporte_Actividades_PI-PNA_2023.xlsx",
content = function(file){
file.copy("download files/reporte_actividades.xlsx", file)
})
# Descarga informe (2 botones)
output$descargaInforme <- downloadHandler(
filename = "Segundo Informe de ejecución del PI-PNA.pdf",
content = function(file) {
file.copy("download files/informe.pdf", file)
}
)
output$descargaInforme2 <- downloadHandler( # ID cambia para corregir error cuando se duplicaba el botón en panel condicional
filename = "Primer Informe de ejecución del PI-PNA.pdf",
content = function(file) {
file.copy("download files/informe.pdf", file)
}
)
# Descarga alineación PI (2 botones misma lógica que el anterior)
output$descargaPIBase <- downloadHandler(
filename = "Alineación del Programa de Implementación a la Política Nacional Anticorrupción.xlsx",
content = function(file) {
file.copy("download files/aliPIPNA.xlsx", file)
}
)
output$descargaPIBase2 <- downloadHandler(
filename = "Alineación del Programa de Implementación a la Política Nacional Anticorrupción.xlsx",
content = function(file) {
file.copy("download files/aliPIPNA.xlsx", file)
}
)
# modal descarga opciones
observeEvent(input$descargaInst, {
showModal(modalDialog(
title = "Formato de la descarga:",
downloadButton("downloadCSV", "Excel"),
downloadButton("downloadPDF", "PDF"),
footer = modalButton("Cerrar")
))
})
}
# Run the app
shinyApp(ui = ui, server = server)
runApp()
?actionButton
?downloadButton
runApp()
icon("download")
runApp()
runApp()
runApp()
shiny::runApp()
runApp('appv2.R')
runApp('appv2.R')
runApp('appv2.R')
runApp('appv2.R')
runApp('appv2.R')
runApp('appv2.R')
runApp('appv2.R')
runApp('appv2.R')
View(edges_efe)
View(nodes_efe)
View(edges_efe)
library(shiny)
library(dplyr)
library(plotly)
library(xlsx)
library(here)
library(tidyverse)
library(shinyjs)
library(DT)
library(spsComps)
library(data.table)
library(d3treeR)
library(treemap)
library(catmaply)
library(zip)
library(viridis)
library(shinycssloaders)
library(htmltools)
library(bslib)
library(echarts4r)
edges_efe %>%
mutate(str == str_detect(target, "(\d+)|([^\d]+)"))
?str_detect
edges_efe %>%
mutate(str == str_detect(target, "(\d+[^\d]*)+"))
edges_efe %>%
mutate(str == str_detect(target, "(d+[^\d]*)+"))
edges_efe %>%
mutate(str == str_detect(target, "(d+[^d]*)+"))
edges_efe %>%
mutate(str == str_detect(target, "^..(.*)$"))
str_detect(edges_efe$target, "^..(.*)$")
str_extract(edges_efe$target, "^..(.*)$")
str_extract(edges_efe$target, "^..(.*)$")
text <- "Hello, World!"
match <- regexpr("^..(.*)$", text, perl = TRUE)
result <- regmatches(text, match)
substr(result, 3, nchar(result))
match
result
text <- "Hello, World!"
result <- sub("^..", "", text)
print(result)  # Output: "llo, World!"
result
sub("^..", "", text)
?sub
sub("^..", "", edges_efe$target)
runApp()
?write.xlsx
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?write.xlsx
runApp()
runApp()
runApp()
runApp()
write.xlsx(est, file = "prueba.xlsx", row.names = FALSE)
write.xlsx2(est, file = "prueba.xlsx", row.names = FALSE)
runApp()
runApp()
runApp()
rm)actSelecRedes()
rm(actSelecRedes())
?rm
rm(actSelecRedes())
rm(actSelecRedes)
runApp()
